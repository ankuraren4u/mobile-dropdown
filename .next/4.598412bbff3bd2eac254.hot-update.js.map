{"version":3,"file":"4.598412bbff3bd2eac254.hot-update.js","sources":["webpack:///component/Dropdown.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport classNames from \"classnames\";\n\nimport \"./../css/style.scss\";\n\nclass Dropdown extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: false\n        };\n    }\n\n    handleSelect(val) {\n        this.setState({\n            value: value\n        });\n    }\n\n    toggleOpen(e) {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n        e.stopPropagation();\n    }\n    render() {\n        const value = this.state.value || this.props.defaultValue;\n        const baseClass = this.props.optionalBaseClassName,\n            controlClass = classNames({\n                [`${baseClass}__control`]: true\n            }),\n            valueClass = classNames({\n                [`${baseClass}__value`]: true\n            }),\n            arrowClass = classNames({ [`${baseClass}__arrow`]: true }),\n            overlayClass = classNames({\n                [`${baseClass}__overlay`]: true,\n                [`${baseClass}__overlay--visible`]: this.state.isOpen\n            }),\n            optionsWrapperClass = classNames({\n                [`${baseClass}__option-wrapper1`]: true,\n                [`${baseClass}__option-wrapper1--visible`]: this.state.isOpen\n            }),\n            optionsClass = classNames({\n                [`${baseClass}__option-wrapper`]: true\n            }),\n            optionsTitle = classNames({\n                [`${baseClass}__title`]: true\n            }),\n            options = React.Children.map(this.props.children, child => {\n                // if (defaultValue && defaultValue === child.props.value) {\n                return React.cloneElement(child, {\n                    selected: value && value === child.props.value,\n                    optionalBaseClass: this.props.optionalBaseClassName\n                });\n                // }\n            }),\n            optionalDropdownTitle = this.props.optionalDropdownTitle ? (\n                <div className={optionsTitle}>\n                    {this.props.optionalDropdownTitle}\n                </div>\n            ) : null;\n\n        return (\n            <div className={baseClass}>\n                <div\n                    className={controlClass}\n                    onClick={this.toggleOpen.bind(this)}\n                >\n                    <span className={valueClass}>\n                        {this.props.placeholder || \"Select\"}\n                    </span>\n                    <span className={arrowClass} />\n                </div>\n                <div\n                    className={overlayClass}\n                    onClick={this.toggleOpen.bind(this)}\n                >\n                    <div className={optionsWrapperClass}>\n                        {optionalDropdownTitle}\n                        <div className={optionsClass}>{options}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nDropdown.defaultProps = {\n    optionalBaseClassName: \"dropdown\",\n    optionalPlaceholder: \"Seelct\"\n};\n\nDropdown.propTypes = {\n    // You can declare that a prop is a specific JS type. By default, these\n    // are all optional.\n    optionalPlaceholder: PropTypes.string,\n    optionalBaseClassName: PropTypes.string,\n    children: PropTypes.array.isRequired,\n    defaultValue: PropTypes.string,\n    changeHandler: PropTypes.func.isRequired,\n    optionalDropdownTitle: PropTypes.string.isRequired\n};\n\nexport default Dropdown;\n\n\n\n// WEBPACK FOOTER //\n// component/Dropdown.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AAGA;AACA;;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AACA;AACA;AACA;AAFA;AAKA;AA7BA;AA+BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;;;;;;;;AAhFA;AACA;AAkFA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAAA;;;;;;;;;;;;AAnGA;;;;;;;;;;A","sourceRoot":""}